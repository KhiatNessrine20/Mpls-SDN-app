from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import ethernet, packet, mpls, ipv4

class MplsApp(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    
    def __init__(self, *args, **kwargs):
        super(MplsApp, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
    
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Install MPLS forwarding rules
        self.install_mpls_forwarding(datapath)
        
        # Send packet-in to the controller for unknown packets
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)
        
    def add_flow(self, datapath, priority, match, actions):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Create a flow mod message and send it to the switch
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]
        mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                match=match, instructions=inst)
        datapath.send_msg(mod)
    
    def install_mpls_forwarding(self, datapath):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # MPLS label 20: s1 -> s2 -> s3
        match = parser.OFPMatch(eth_type=0x8847, mpls_label=20)
        actions = [parser.OFPActionPushMpls(ethertype=0x8847),
                   parser.OFPActionSetField(mpls_label=30),
                   parser.OFPActionOutput(ofproto.OFPP_NORMAL)]
        self.add_flow(datapath, 1, match, actions)
        
        # MPLS label 30: s3 -> s2 -> s1
        match = parser.OFPMatch(eth_type=0x8847, mpls_label=30)
        actions = [parser.OFPActionPopMpls(ethertype=0x0800),
                   parser.OFPActionSetField(eth_dst='00:00:00:00:00:02'),
                   parser.OFPActionOutput(2)]
        self.add_flow(datapath, 1, match, actions)
        
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Parse the incoming packet
        pkt = packet.Packet(msg.data)
        eth
